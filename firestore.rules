/**
 * @fileoverview Firestore Security Rules for the wedding application.
 *
 * Core Philosophy:
 * This ruleset provides granular access control for managing wedding-related data.
 * It uses a mixture of public read with owner-only write access for photos and
 * guest-only access for guest data. The configuration is locked down to prevent unauthorized access.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores individual guest information, secured for guest access.
 * - /photos/{photoId}: Stores photos, publicly readable but writable by authenticated users.
 * - /site_configuration/{configId}: Stores site-wide configuration, with highly restricted access.
 *
 * Key Security Decisions:
 * - Guest data is only accessible to guests.
 * - Photo listing is public, but creation, updates, and deletion are restricted to authenticated users.
 * - Site configuration changes are highly restricted.
 *
 * Denormalization for Authorization:
 *   The current data model does not require denormalization.
 *
 * Structural Segregation:
 *   The separation of guests, photos, and site configuration into separate collections ensures
 *   a clear security posture for each.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages guest information. Guests can only access their own data.
     * @path /guests/{guestId}
     * @allow (get, update, delete) User with matching {guestId} can access their own guest data.
     * @allow (create) User with matching {guestId} can create their own guest data.
     * @deny (get, update, delete) User with mismatched {guestId} cannot access other guest data.
     * @deny (create) User with mismatched {guestId} cannot create guest data for other users.
     * @principle Enforces document ownership for all operations.
     */
    match /guests/{guestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(guestId) {
        return request.auth.uid == guestId;
      }

      function isExistingOwner(guestId) {
        return isOwner(guestId) && resource != null;
      }

      allow get: if isOwner(guestId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == guestId;
      allow update: if isExistingOwner(guestId);
      allow delete: if isExistingOwner(guestId);
    }

    /**
     * @description Manages photos in a public gallery. Anyone can view photos, but only authenticated users can upload, update, or delete them.
     * @path /photos/{photoId}
     * @allow (get, list) Any user can view the photo gallery.
     * @allow (create) Authenticated users can upload photos.
     * @allow (update, delete) Authenticated users can update/delete photos.
     * @deny (create) Unauthenticated users cannot upload photos.
     * @deny (update, delete) Unauthenticated users cannot modify photos.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /photos/{photoId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages site-wide configuration settings. Access is highly restricted.
     * @path /site_configuration/{configId}
     * @allow (get) Configuration data is readable by everyone.
     * @deny (create, update, delete) No one can modify the site configuration through client-side rules.
     * @principle Restricts site configuration changes to backend services only.
     */
    match /site_configuration/{configId} {
      allow get: if true;
      allow list: if false;
      allow create, update, delete: if false;
    }
  }
}