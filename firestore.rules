/**
 * @fileoverview Firestore Security Rules for the wedding celebration application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and restricts data access to authenticated users.
 * It enforces strict ownership for guest data and restricts access to site configuration and photo management.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores individual guest information. Only the authenticated user can manage their own guest data.
 * - /photos/{photoId}: Stores wedding photos. Publicly readable, but only authorized users can upload, modify, or delete.
 * - /site_configuration/{configId}: Stores site-wide configuration settings. Access restricted to authorized users.
 *
 * Key Security Decisions:
 * - All write operations are restricted to authenticated users.
 * - Listing of guests or site configurations is not permitted.
 *
 * Authorization notes:
 * - The documentation states: "Access to all data is restricted to authenticated users via firebase authentication.".
 * - The documentation also states, "Access is generally open for read, but restricted for create/update/delete to authorized users." for `photos` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(guestId) {
      return request.auth.uid == guestId;
    }

    function isExistingOwner(guestId) {
      return isOwner(guestId) && resource != null;
    }

    /**
     * @description Manages access to guest data, enforcing ownership. Only an authenticated user can manage their own guest data.
     * @path /guests/{guestId}
     * @allow (create) - User with UID 'user_abc' can create a guest document with ID 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update a guest document with ID 'user_abc'.
     * @allow (delete) - User with UID 'user_abc' can delete a guest document with ID 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a guest document with ID 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update a guest document with ID 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete a guest document with ID 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /guests/{guestId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(guestId) && request.resource.data.id == guestId;
      allow update: if isSignedIn() && isExistingOwner(guestId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(guestId);
    }

    /**
     * @description Manages access to wedding photos. Publicly readable, but write access restricted to authorized users.
     * @path /photos/{photoId}
     * @allow (get) - Any user can read any photo.
     * @allow (list) - Any user can list photos.
     * @allow (create) - Authenticated user can create a photo.
     * @allow (update) - Authenticated user can update a photo.
     * @allow (delete) - Authenticated user can delete a photo.
     * @deny (create) - Unauthenticated user cannot create a photo.
     * @deny (update) - Unauthenticated user cannot update a photo.
     * @deny (delete) - Unauthenticated user cannot delete a photo.
     * @principle Public read, authenticated writes.
     */
    match /photos/{photoId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to site configuration settings.  Access is restricted to authorized users.
     * @path /site_configuration/{configId}
     * @allow (get) - Authenticated user can get the site configuration.
     * @allow (create) - Authenticated user can create the site configuration.
     * @allow (update) - Authenticated user can update the site configuration.
     * @allow (delete) - Authenticated user can delete the site configuration.
     * @deny (get) - Unauthenticated user cannot get the site configuration.
     * @deny (create) - Unauthenticated user cannot create the site configuration.
     * @deny (update) - Unauthenticated user cannot update the site configuration.
     * @deny (delete) - Unauthenticated user cannot delete the site configuration.
     * @principle Restricts access to authenticated users.
     */
    match /site_configuration/{configId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}