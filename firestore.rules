/**
 * @file Firebase Security Rules for Wedding App
 * @version 2
 *
 * @description
 * This ruleset enforces a secure access control model for the Wedding App, focusing on authenticated users.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores individual guest information.
 * - /photos/{photoId}: Stores photo gallery data.
 * - /site_configuration/{configId}: Stores site-wide configuration settings.
 *
 * Key Security Decisions:
 * - Only authenticated users have access to any data. Anonymous users are not permitted.
 * - Strict ownership model for /guests/{guestId}: Only the authenticated user matching {guestId} can access the guest document.
 * - Public read access for /photos/{photoId}: All users can view the photo gallery, but only authorized users (not defined here) can modify it.
 * - Restricted access to /site_configuration/{configId}: Only authorized users (not defined here) can access or modify the site configuration.
 * - No user listing is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to guest information.
     * @path /guests/{guestId}
     * @allow (create, get, update, delete, list) if isSignedIn() and isOwner(guestId)
     * @deny (create, get, update, delete, list) if !isSignedIn()
     * @principle Enforces document ownership for writes. Authenticated user can only access their own guest data.
     */
    match /guests/{guestId} {
      allow get: if isSignedIn() && isOwner(guestId);
      allow list: if isSignedIn() && isOwner(guestId);
      allow create: if isSignedIn() && isOwner(guestId);
      allow update: if isSignedIn() && isOwner(guestId) && resource != null;
      allow delete: if isSignedIn() && isOwner(guestId) && resource != null;
    }

    /**
     * @description Controls access to photos in the photo gallery.
     * @path /photos/{photoId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false // TODO: Add authorization check
     * @deny (create, update, delete) if !isSignedIn() // Prevent unauthenticated writes
     * @principle Public read access with restricted writes.
     */
    match /photos/{photoId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorization check
      allow update: if false; // TODO: Add authorization check && resource != null;
      allow delete: if false; // TODO: Add authorization check && resource != null;
    }

    /**
     * @description Controls access to site configuration settings.
     * @path /site_configuration/{configId}
     * @allow (get) if false // TODO: Add authorization check
     * @allow (create, update, delete) if false // TODO: Add authorization check
     * @deny (create, get, update, delete, list) if !isSignedIn() // Prevent unauthenticated access
     * @principle Restricts access to authorized users only.
     */
    match /site_configuration/{configId} {
      allow get: if false; // TODO: Add authorization check
      allow list: if false;
      allow create: if false; // TODO: Add authorization check
      allow update: if false; // TODO: Add authorization check && resource != null;
      allow delete: if false; // TODO: Add authorization check && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}