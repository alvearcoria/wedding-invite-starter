/**
 * @fileoverview Firestore Security Rules for the wedding celebration application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and restricts data access based on Firebase Authentication.
 * Only authenticated users have access to any data.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores information about wedding guests. Access is restricted to authenticated users.
 * - /photos/{photoId}: Stores photos for the wedding gallery. Read access is public, but write access is restricted to authenticated users.
 * - /site_configuration/{configId}: Stores site configuration settings. Access is restricted to authenticated users.
 *
 * Key Security Decisions:
 * - No user listing is allowed on any collections.
 * - All data is secured by Firebase Authentication, requiring a user to be signed in.
 * - Data shape is not validated in this prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /guests/{guestId} collection.
     * @path /guests/{guestId}
     * @allow (get, list) if isSignedIn() - Allows an authenticated user to get or list guests data.
     * @allow (create, update, delete) if isSignedIn() - Allows an authenticated user to create, update or delete guests data.
     * @deny (create) if !isSignedIn() - Denies a create operation if the user is not signed in.
     * @deny (update) if !isSignedIn() - Denies an update operation if the user is not signed in.
     * @deny (delete) if !isSignedIn() - Denies a delete operation if the user is not signed in.
     * @principle Requires the user to be signed in to perform any operation on guest data.
     */
    match /guests/{guestId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the /photos/{photoId} collection.
     * @path /photos/{photoId}
     * @allow (get, list) if true - Allows anyone to read photos.
     * @allow (create, update, delete) if isSignedIn() - Requires the user to be signed in to create, update, or delete photos.
     * @deny (create) if !isSignedIn() - Denies a create operation if the user is not signed in.
     * @deny (update) if !isSignedIn() - Denies an update operation if the user is not signed in.
     * @deny (delete) if !isSignedIn() - Denies a delete operation if the user is not signed in.
     * @principle Allows public read access to photos, but restricts write access to authenticated users.
     */
    match /photos/{photoId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the /site_configuration/{configId} collection.
     * @path /site_configuration/{configId}
     * @allow (get, list) if isSignedIn() - Requires the user to be signed in to get or list the site configuration.
     * @allow (create, update, delete) if isSignedIn() - Requires the user to be signed in to create, update, or delete the site configuration.
     * @deny (create) if !isSignedIn() - Denies a create operation if the user is not signed in.
     * @deny (update) if !isSignedIn() - Denies an update operation if the user is not signed in.
     * @deny (delete) if !isSignedIn() - Denies a delete operation if the user is not signed in.
     * @principle Requires the user to be signed in to perform any operation on the site configuration.
     */
    match /site_configuration/{configId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the /invitations/{invitationId}/guests collection.
     * @path /invitations/{invitationId}/guests
     * @allow (create) if isSignedIn() - Allows an authenticated user to create guest data.
     * @allow (get, list) if false - Explicitly denies get and list operations.
     * @allow (update, delete) if false - Explicitly denies update and delete operations.
     * @deny (create) if !isSignedIn() - Denies a create operation if the user is not signed in.
     * @deny (update) if isSignedIn() - Denies update operation.
     * @deny (delete) if isSignedIn() - Denies delete operation.
     */
    match /invitations/{invitationId}/guests {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}