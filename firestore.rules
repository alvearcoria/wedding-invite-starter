/**
 * @description: This ruleset enforces a strict user-ownership model for guests and their photos.
 *  Site configurations are publicly readable but not writable except with a role-based access.
 * @dataStructure:
 *  - /guests/{guestId}: Stores guest information.
 *  - /guests/{guestId}/photos/{photoId}: Stores photos uploaded by guests.
 *  - /site_configuration/{configId}: Stores site configuration settings.
 * @keySecurityDecisions:
 *  - Guests can only read/write their own data.
 *  - Guests can only manage (create, update, delete) their own photos.
 *  - Site configurations are publicly readable, writeable via role.
 *  - Listing guests is only allowed for authorized users (e.g., admins - not implemented here).
 * @denormalizationForAuthorization: Path-based ownership for photos under guests.
 * @structuralSegregation: Photos are stored as subcollections of guests to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Manages guest data, ensuring guests can only access their own information.
     * @path: /guests/{guestId}
     * @allow: User with UID 'user123' (create) can create a guest document with ID 'user123'.
     * @deny: User with UID 'user456' (create) cannot create a guest document with ID 'user123'.
     * @principle: Enforces document ownership for writes.
     */
    match /guests/{guestId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow read access if the user is signed in
      allow get: if isSignedIn();
      allow list: if false; // Listing guests is not allowed.

      // Allow creation if the user is the owner and the document ID matches the user ID
      allow create: if isOwner(guestId) && request.resource.data.id == guestId;

      // Allow updates if the user is the owner and the document ID has not changed
      allow update: if isOwner(guestId) && resource != null && request.resource.data.id == resource.data.id;

      // Allow deletion if the user is the owner and the document exists
      allow delete: if isOwner(guestId) && resource != null;
    }

    /**
     * @description: Manages photos uploaded by guests, ensuring guests can only access their own photos.
     * @path: /guests/{guestId}/photos/{photoId}
     * @allow: User with UID 'user123' (create) can create a photo document under guest 'user123'.
     * @deny: User with UID 'user456' (create) cannot create a photo document under guest 'user123'.
     * @principle: Enforces document ownership for writes.
     */
    match /guests/{guestId}/photos/{photoId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow read access if the user is signed in
      allow get: if isSignedIn();

      // Allow listing if the user is the owner
      allow list: if isOwner(guestId);

      // Allow creation if the user is the owner
      allow create: if isOwner(guestId);

      // Allow updates if the user is the owner and the document exists
      allow update: if isOwner(guestId) && resource != null;

      // Allow deletion if the user is the owner and the document exists
      allow delete: if isOwner(guestId) && resource != null;
    }

    /**
     * @description: Manages site configuration settings.  Publicly readable.
     * @path: /site_configuration/{configId}
     * @allow: Any user (get) can read the site configuration.
     * @deny: Any non-admin user (create) cannot create a site configuration.
     * @principle: Public read, restricted write.
     */
    match /site_configuration/{configId} {
      // Allow read access to everyone
      allow get, list: if true;

      // Deny all write operations.
      allow create, update, delete: if false; // TODO: Add role-based access for admins.
    }
  }
}