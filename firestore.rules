/**
 * @fileoverview Firestore Security Rules for the Wedding Celebration Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and restricts data access based on the user's authentication status.
 * Read access for photos is public, while other collections and write access are restricted to authenticated users.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores guest information.
 * - /photos/{photoId}: Stores wedding photos.
 * - /site_configuration/{configId}: Stores site-wide configuration.
 *
 * Key Security Decisions:
 * - All write access is limited to authenticated users.
 * - Photo read access is public.
 * - No data validation is performed in this prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the guests collection.
     * @path /guests/{guestId}
     * @allow (create, update, delete) - Authenticated user creating, updating, or deleting a guest document.
     * @deny (create, update, delete) - Unauthenticated user attempting to create, update, or delete a guest document.
     * @allow (get, list) - Authenticated user reading guest document.
     * @deny (get, list) - Unauthenticated user attempting to read guest document.
     * @principle Enforces authenticated user access for guest data.
     */
    match /guests/{guestId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the photos collection.
     * @path /photos/{photoId}
     * @allow (get, list) - Any user (authenticated or not) can read photos.
     * @allow (create, update, delete) - Authenticated user creating, updating, or deleting a photo.
     * @deny (create, update, delete) - Unauthenticated user attempting to create, update, or delete a photo.
     * @principle Allows public read access to photos but restricts write access to authenticated users.
     */
    match /photos/{photoId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the site configuration collection.
     * @path /site_configuration/{configId}
     * @allow (create, update, delete) - Authenticated user creating, updating, or deleting the site configuration.
     * @deny (create, update, delete) - Unauthenticated user attempting to create, update, or delete the site configuration.
     * @allow (get, list) - Authenticated user reading the site configuration.
     * @deny (get, list) - Unauthenticated user attempting to read the site configuration.
     * @principle Enforces authenticated user access for site configuration data.
     */
    match /site_configuration/{configId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}