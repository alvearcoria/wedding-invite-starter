/**
 * @fileoverview Firestore Security Rules for the Wedding Celebration App.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and restricts data access based on the type of data.
 *  - Guests: Only the application itself can manage guest data.
 *  - Photos: Public read access, restricted writes.
 *  - Site Configuration: Restricted access to authorized users.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores guest information.
 * - /photos/{photoId}: Stores photo gallery images.
 * - /site_configuration/{configId}: Stores site-wide configuration.
 *
 * Key Security Decisions:
 * - No user listing is allowed for guests.
 * - All read and write operations require authentication unless explicitly stated.
 * - Data validation is limited to authorization-critical fields in the prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /guests collection. Guests are managed by the application.
     * @path /guests/{guestId}
     * @allow get: if false - Guests should not be readable by end users.
     * @allow list: if false - Guests should not be listable.
     * @allow create: if false - Guests are only managed by the application.
     * @allow update: if false - Guests are only managed by the application.
     * @allow delete: if false - Guests are only managed by the application.
     * @principle Application-managed data; no direct user access.
     */
    match /guests/{guestId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /photos collection. Public read, owner-only writes.
     * @path /photos/{photoId}
     * @allow get: if true - Public read access for all photos.
     * @allow list: if true - Public read access for all photos.
     * @allow create: if isSignedIn() - Photo creation is limited to authorized users.
     * @allow update: if isSignedIn() && resource != null - Photo updates are limited to authorized users.
     * @allow delete: if isSignedIn() && resource != null - Photo deletion is limited to authorized users.
     * @principle Public read, restricted writes.
     */
    match /photos/{photoId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for the /site_configuration collection. Restricted access.
     * @path /site_configuration/{configId}
     * @allow get: if isSignedIn() - Only signed-in users can read the site configuration.
     * @allow list: if false - Site configuration should not be listable.
     * @allow create: if false - Site configuration creation is not allowed.
     * @allow update: if isSignedIn() && resource != null - Only signed-in users can update the site configuration.
     * @allow delete: if false - Site configuration deletion is not allowed.
     * @principle Restricted access to site-wide settings.
     */
    match /site_configuration/{configId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn() && resource != null;
      allow delete: if false;
    }
  }
}

/**
 * @description Checks if the request is authenticated.
 * @return {bool} True if the request is authenticated, false otherwise.
 */
function isSignedIn() {
  return request.auth != null;
}