/**
 * @fileoverview Firestore Security Rules for the wedding celebration application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and restricts data access to authenticated users.
 * It employs path-based ownership for user-specific data and restricts access to site configuration and guest data.
 * The photo gallery allows public read access but restricts write access to authorized users.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores information about wedding guests.
 * - /photos/{photoId}: Stores photos for the wedding gallery.
 * - /site_configuration/{configId}: Stores site configuration settings.
 *
 * Key Security Decisions:
 * - All write operations are restricted to authenticated users.
 * - Guest data is not user-specific and has no owner, so it's completely locked down.
 * - Photos are publicly readable, but only authorized users can create, update, or delete them.
 * - Site configuration is only accessible to authorized users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the guest collection by denying all access.
     * @path /guests/{guestId}
     * @allow (none) Guests are not accessible by any user or role.
     * @deny (all)
     * @principle Guest data is not user-specific and is therefore locked down.
     */
    match /guests/{guestId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to photos, but restricts write access to authenticated users.
     * @path /photos/{photoId}
     * @allow (get, list) Any user can read photos.
     * @allow (create, update, delete) Authenticated users can modify photos.
     * @deny (create, update, delete) Unauthenticated users cannot modify photos.
     * @principle Allows public read access while restricting write access to authorized users.
     */
    match /photos/{photoId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures the site configuration collection by restricting access to authenticated users.
     * @path /site_configuration/{configId}
     * @allow (get, list, create, update, delete) Authenticated users can manage site configuration.
     * @deny (get, list, create, update, delete) Unauthenticated users cannot manage site configuration.
     * @principle Restricts access to site configuration to authorized users.
     */
    match /site_configuration/{configId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}