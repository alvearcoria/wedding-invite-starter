/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset prioritizes security and data access control for a wedding website.
 *  It enforces strict ownership for guest data, allows public read access to photos and venues,
 *  and restricts modification of the site configuration to authenticated users.
 *
 * @data_structure
 *  - /guests/{guestId}: Stores individual guest information, accessible only to the guest themselves.
 *  - /photos/{photoId}: Stores wedding photos, publicly readable but write-protected.
 *  - /venues/{venueId}: Stores venue details, publicly readable but write-protected.
 *  - /site_configuration/config: Stores site-wide settings, modifiable only by authenticated users.
 *
 * @key_security_decisions
 *  - Guest data is strictly private, accessible only to the guest (based on ID).
 *  - Photos and venues are publicly readable to facilitate easy access for all users.
 *  - Site configuration changes are restricted to authenticated users to prevent unauthorized modifications.
 *  - Listing of guests is forbidden to protect guest privacy.
 *
 * @denormalization_for_authorization N/A - no specific denormalization is applied in this version.
 * @structural_segregation The ruleset uses distinct collections for user-specific data (/guests)
 * and public data (/photos, /venues) to simplify access control and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to guest data. Each guest can only read and write their own data.
     * @path /guests/{guestId}
     * @allow (create) - Authenticated user can create a guest entry for themselves with matching id
     * @allow (get, update, delete) - Authenticated user can only access guest data if their UID matches the guestId.
     * @deny (create) - If authenticated user tries to create a guest document where the id doesn't match their UID.
     * @deny (get, update, delete) - If an unauthenticated user tries to access guest data.
     * @principle Enforces document ownership for writes.
     */
    match /guests/{guestId} {
      allow get: if isOwner(guestId);
      allow list: if false;
      allow create: if isOwner(guestId) && request.resource.data.id == guestId;
      allow update: if isExistingOwner(guestId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(guestId);
    }

    /**
     * @description Controls access to photo data. Photos are publicly readable, but only authenticated users can create or modify them.
     * @path /photos/{photoId}
     * @allow (get, list) - Any user can read the photo data.
     * @allow (create) - Only an authenticated user can create a photo.
     * @deny (update, delete) - No user can update or delete a photo.
     * @principle Allows public read access with owner-only writes.
     */
    match /photos/{photoId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to venue data. Venues are publicly readable, but only authenticated users can create or modify them.
     * @path /venues/{venueId}
     * @allow (get, list) - Any user can read the venue data.
     * @allow (create) - Only an authenticated user can create a venue.
     * @deny (update, delete) - No user can update or delete a venue.
     * @principle Allows public read access with owner-only writes.
     */
    match /venues/{venueId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to site configuration data. Only authenticated users can read or modify the site configuration.
     * @path /site_configuration/config
     * @allow (get) - Any authenticated user can read the site configuration.
     * @allow (update) - Only authenticated users can modify site configuration.
     * @deny (create, delete) - No user can create or delete the site configuration document.
     * @principle Restricts access to sensitive configuration data to authenticated users.
     */
    match /site_configuration/config {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn();
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}