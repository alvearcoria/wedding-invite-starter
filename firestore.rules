/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict access control model for a wedding celebration application.
 *
 * Core Philosophy:
 *  - Authenticated users have read and write access to photos.
 *  - Guests can only be created via invitation.
 *  - Site configuration can only be read.
 *
 * Data Structure:
 *  - /guests/{guestId}: Stores guest information, with application-only access.
 *  - /photos/{photoId}: Stores photos, publicly readable but writeable only by authenticated users.
 *  - /site_configuration/{configId}: Stores site configuration, readable by all, but writeable only by admins.
 *
 * Key Security Decisions:
 *  - Guests are created via invitation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read and write photos.
     * @path /photos/{photoId}
     * @allow (get, list) Authenticated users can read any photo.
     * @allow (create) Authenticated users can create photos.
     * @allow (update, delete) Authenticated users can update or delete photos if they are authenticated.
     * @deny  Unauthenticated users cannot create, update, or delete photos.
     * @principle Allows authenticated users to manage photos.
     */
    match /photos/{photoId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Restricts access to guest information to the application itself.
     * @path /guests/{guestId}
     * @allow (create) Guests can only be created via invitation.
     * @deny (get, list, update, delete) No one can read, list, update, or delete guests directly.
     * @principle Enforces that guests are managed internally by the application.
     */
    match /guests/{guestId} {
      allow get, list, update, delete: if false;
      allow create: if false;
    }

     /**
      * @description Manages site configuration settings.  Read access is open, but writes are forbidden.
      * @path /site_configuration/{configId}
      * @allow (get, list) All users can read the site configuration.
      * @deny (create, update, delete) No one can create, update, or delete the site configuration.
      * @principle Ensures site configuration is read-only.
      */
    match /site_configuration/{configId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Placeholder for invitations subcollection. Guests can only be created via invitation.
     * @path /invitations/{invitationId}/guests
     */
    match /invitations/{invitationId}/guests {
       allow create: if true;
       allow get, list, update, delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}