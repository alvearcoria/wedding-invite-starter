/**
 * @fileoverview Firestore Security Rules for the Wedding Celebration App.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and restricts data access based on the type of data.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores guest information. Access is restricted.
 * - /photos/{photoId}: Stores photos for the wedding gallery. Read access is public, write access is restricted.
 * - /site_configuration/{configId}: Stores site configuration settings. Access is restricted.
 *
 * Key Security Decisions:
 * - Guests' data is secured and not publicly accessible.
 * - Photos are publicly readable but only authorized users can create, update, or delete them.
 * - Site configuration is only accessible to authorized users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to guest data. Guests can only be created by authorized users.
     * @path /guests/{guestId}
     * @allow (create) An authorized user can create a guest.
     * @deny (read, update, delete) No one can read, update, or delete guest data without authorization.
     * @principle Enforces data privacy and prevents unauthorized access to guest information.
     */
    match /guests/{guestId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to photos in the photo gallery. Photos are publicly readable.
     *              Create, update, and delete operations are restricted to authorized users.
     * @path /photos/{photoId}
     * @allow (get, list) Any user (or no user) can read and list photos.
     * @allow (create, update, delete) Only authorized users can create, update, or delete photos.
     * @deny (create, update, delete) Unauthorized users cannot create, update, or delete photos.
     * @principle Allows public read access to photos while protecting against unauthorized modifications.
     */
    match /photos/{photoId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn() ;
    }

    /**
     * @description Controls access to the site configuration. Only authorized users can manage the site configuration.
     * @path /site_configuration/{configId}
     * @allow (create, update, delete) Only authorized users can create, update, or delete site configuration.
     * @deny (get, list) No user can get or list site configuration data without authorization.
     * @principle Protects site settings from unauthorized modifications.
     */
    match /site_configuration/{configId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // Helper function to determine if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}