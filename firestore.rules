/**
 * @fileoverview Firestore Security Rules for the wedding celebration application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and restricts data access based on the type of data.
 * Guests data is restricted to authenticated users.
 * Photos are publicly readable but only authorized users can modify them.
 * The site configuration is only accessible to authorized users.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores information about wedding guests.
 * - /photos/{photoId}: Stores photos for the wedding gallery.
 * - /site_configuration/{configId}: Stores the site configuration settings.
 *
 * Key Security Decisions:
 * - Access to guest data is restricted to authenticated users.
 * - Photo data is publicly readable, but only authorized users can modify it.
 * - Site configuration data is only accessible to authorized users.
 * - The ruleset uses path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to guest information.
     * @path /guests/{guestId}
     * @allow (create) - An authenticated user can create a guest document.
     * @deny (create) - An unauthenticated user cannot create a guest document.
     * @principle Enforces authentication for guest data access.
     */
    match /guests/{guestId} {
      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow read access to all authenticated users.
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Allow create, update, and delete only for authenticated users.
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to photo gallery.
     * @path /photos/{photoId}
     * @allow (get, list) - Any user can read the photo data.
     * @deny (create, update, delete) - Only authorized users can modify photo data.
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /photos/{photoId} {
      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow public read access.
      allow get: if true;
      allow list: if true;

      // Allow create, update, and delete only for authenticated users.
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to site configuration.
     * @path /site_configuration/{configId}
     * @allow (get) - An authenticated user can read the site configuration.
     * @deny (create, update, delete) - Only authorized users can modify the site configuration.
     * @principle Restricts access to the site configuration to authorized users.
     */
    match /site_configuration/{configId} {
      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow read access only for authenticated users.
      allow get: if isSignedIn();
      allow list: if false;

      // Allow create, update, and delete only for authenticated users.
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
    
      /**
       * @description Invitations collection, guests subcollection match block.
       * @path /invitations/{invitationId}/guests/{guestId}
       * @allow (create) - Guests can be created for an Invitation by authenticated users.
       * @deny (create) - Guests cannot be created by anonymous users.
       */
       match /invitations/{invitationId}/guests/{guestId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
       }
  }
}