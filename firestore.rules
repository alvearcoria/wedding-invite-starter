/**
 * @fileoverview Firestore Security Rules for the Wedding App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict access control model based on authenticated users
 * with varying levels of permissions across different data collections.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores information about individual wedding guests.
 *   Access is intended for internal application use only.
 * - /photos/{photoId}: Stores wedding gallery photos. Read access is public,
 *   but write access is restricted.
 * - /site_configuration/{configId}: Stores site configuration settings. Only
 *   authorized users can access this collection. There should only be one
 *   document.
 * - /invitations/{invitationId}/guests : Stores guest information related to a particular invitation.
 *
 * Key Security Decisions:
 * - Guests: Guests collection enforces strong authorization based on their IDs.
 * - Photos: Photos are publicly readable but only authorized users can modify them.
 * - Site Configuration: Site configuration is only modifiable by authorized users.
 * - Invitations: Guests creation under invitations is restricted to authenticated users, updates and deletes are not permitted.
 *
 * Denormalization for Authorization:
 *  None. The current design does not require denormalization.
 *
 * Structural Segregation:
 *  None. The current design does not use structural segregation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the guest documents. Guests can only be read and written by the application.
     * @path /guests/{guestId}
     * @allow get, list: if false;
     * @allow create, update, delete: if false;
     * @principle Access is restricted to the application itself.
     */
    match /guests/{guestId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the photo documents. Photos are publicly readable, but only authorized users can create, update, or delete them.
     * @path /photos/{photoId}
     * @allow get, list: if true;
     * @allow create, update, delete: if isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public read access for photos while restricting write access to authenticated users.
     */
    match /photos/{photoId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to the site configuration document. Only authenticated users can read or write the site configuration.
     * @path /site_configuration/{configId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny get, list: if !isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Restricts access to the site configuration to authenticated users.
     */
    match /site_configuration/{configId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to the guest documents under a specific invitation. Guests can be created by authenticated users, updates and deletes are not permitted.
     * @path /invitations/{invitationId}/guests
     * @allow create: if isSignedIn();
     * @allow get, list, update, delete: if false;
     * @principle Restricts access to creating guests under an invitation to authenticated users.
     */
    match /invitations/{invitationId}/guests {
        allow create: if isSignedIn();
        allow get, list, update, delete: if false;
    }
  }

  // Helper function to determine if a user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}