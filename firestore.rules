/**
 * @fileoverview Firestore Security Rules for the Wedding application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict authentication model, requiring all users to be signed in to access any data.
 * It employs a mix of ownership-based and role-based access control, tailored to different data collections.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores individual guest information, secured by application-only access.
 * - /photos/{photoId}: Stores wedding photos, publicly readable but write-protected for non-authorized users.
 * - /site_configuration/{configId}: Stores site-wide configuration settings, accessible only to authenticated users.
 * - /invitations/{invitationId}/guests/{guestId}: Guest data associated with an invitation
 *
 * Key Security Decisions:
 * - All `create`, `update`, and `delete` operations require authentication.
 * - Listing of guests is restricted.
 * - Data validation is limited to relational integrity checks during `create` operations.
 *
 * Denormalization for Authorization:
 *   Not used in this version.
 *
 * Structural Segregation:
 *   Not used in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to the guests collection only to authenticated users.
     * @path /guests/{guestId}
     * @allow (create) - Authenticated user can create a guest document.
     * @deny (read, write) - Non-authenticated user cannot read or write guest data.
     * @principle Requires authentication for all operations.
     */
    match /guests/{guestId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to the photos collection, but restricts writes to authenticated users.
     * @path /photos/{photoId}
     * @allow (get, list) - Any user can read the photos.
     * @allow (create) - Authenticated users can create photos.
     * @deny (update, delete) - Non-authenticated users cannot update or delete photos.
     * @principle Allows public read with authenticated-user-only writes.
     */
    match /photos/{photoId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to the site configuration collection to authenticated users.
     * @path /site_configuration/{configId}
     * @allow (get, create, update) - Authenticated user can read, create, and update the site configuration.
     * @deny (delete) - Non-authenticated users cannot delete site configuration.
     *
     * @principle Requires authentication for all operations on site configuration.
     */
    match /site_configuration/{configId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

     /**
      * @description Allow authenticated users to create guest entries under specific invitation.
      * @path /invitations/{invitationId}/guests/{guestId}
      * @allow (create) - Authenticated user can create a guest document under an invitation.
      * @deny (read, update, delete) - No read, update, or delete access granted.
      * @principle Requires authentication for creating guest entries.
      */
    match /invitations/{invitationId}/guests/{guestId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }


    function isSignedIn() {
      return request.auth != null;
    }
  }
}