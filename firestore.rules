/**
 * @file Overview
 * This ruleset enforces a public read, owner-write model for photos, and public read only model for venues and site configuration.
 * Guests collection follows a different access control. All data is stored in top-level collections.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores guest information.
 * - /photos/{photoId}: Stores photo URLs and descriptions. Photos are publicly readable and owner writable. Assumes server side moderation for photos.
 * - /venues/{venueId}: Stores venue details. Publicly readable.
 * - /site_configuration/config: Stores site configuration settings. Publicly readable. Only one document exists at this path.
 *
 * Key Security Decisions:
 * - Guest collection: follow a public read and public create model.
 * - Photos: Publicly readable, but writes are restricted to authenticated users. Assumes server-side moderation.
 * - Venues and Site Configuration: Publicly readable, no writes allowed via client-side rules.
 * - No user listing is allowed for any collection.
 *
 * Denormalization for Authorization:
 * - Photos will need an uploaderId field to identify the user who uploaded the photo. This is critical for the owner-write model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to guest information.
     * @path /guests/{guestId}
     * @allow (get, list) Allows any user to read guest data.
     * @allow (create) Allows any user to create guest data.
     * @deny (update, delete) Denies updates and deletes by any user as there is no owner validation.
     * @principle Public read, public create, no write.
     */
    match /guests/{guestId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to photos in the photo gallery.
     * @path /photos/{photoId}
     * @allow (get, list) Allows any user to read photo data.
     * @allow (create) Allows ANY user to create photos, enabling the guest album feature.
     * @allow (update, delete) Allows authenticated users to update and delete photos they own.
     * @deny (create) Denies create if the uploaderId does not match the authenticated user's UID.
     * @deny (update, delete) Denies updates and deletes if the user is not the owner of the photo.
     * @principle Public read, public create for guests.
     */
    match /photos/{photoId} {
      allow get: if true;
      allow list: if true;
      // --- REGLA CORREGIDA ---
      // Permite que cualquiera pueda subir una foto, igual que el formulario de RSVP.
      allow create: if true; 
      // Las reglas de update y delete se mantienen para una posible gesti√≥n futura.
      allow update: if isSignedIn() && isExistingOwner(resource.data.uploaderId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.uploaderId);
    }

    /**
     * @description Controls access to venue information.
     * @path /venues/{venueId}
     * @allow (get, list) Allows any user to read venue data.
     * @deny (create, update, delete) Denies all write operations.
     * @principle Public read, no write.
     */
    match /venues/{venueId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to site configuration settings.
     * @path /site_configuration/config
     * @allow (get, list) Allows any user to read the site configuration.
     * @deny (create, update, delete) Denies all write operations.
     * @principle Public read, no write.
     */
    match /site_configuration/config {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}