/**
 * @fileoverview Firestore Security Rules for the wedding celebration application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and restricts data access based on user authentication and path-based authorization.
 *
 * Data Structure:
 * - /invitations/{invitationId}/guests/{guestId}: Stores guest RSVP information, secured by invitationId.
 * - /invitations/{invitationId}/photos/{photoId}: Stores metadata for photos uploaded by guests.
 * - /site_configuration/{configId}: Stores site configuration settings. Only one document is expected.
 *
 * Key Security Decisions:
 * - All data access requires authentication. Anonymous users are allowed, and can upload photos, and submit guest RSVPs.
 * - Listing all guests or photos is restricted to authenticated users.
 * - Site configuration can only be written by authorized users (not implemented in this prototype).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to guest RSVP information for a specific wedding invitation.
     * @path /invitations/{invitationId}/guests/{guestId}
     * @allow (create) Authenticated user can create a guest document under a specific invitation if invitationId matches.
     * @deny (create) If invitationId does not match the authenticated user's ID.
     * @allow (get, list) Authenticated users can retrieve or list guest information.
     * @deny (update, delete) No one can update or delete guest information via the client.
     * @principle Enforces path-based authorization, ensuring that guests can only access their own data.
     */
    match /invitations/{invitationId}/guests/{guestId} {
      allow create: if isSignedIn() && request.resource.data.id == guestId;
      allow get, list: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to photos uploaded by guests for a specific wedding.
     * @path /invitations/{invitationId}/photos/{photoId}
     * @allow (get, list) Allows any authenticated user to view the photo gallery.
     * @allow (create) Allows any authenticated user to upload photos.
     * @deny (update, delete) Prevents any user from updating or deleting photos via client.
     * @principle Allows public read access to photos but restricts write access to authenticated users.
     */
    match /invitations/{invitationId}/photos/{photoId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to site configuration settings.
     * @path /site_configuration/{configId}
     * @allow (get) Allows any authenticated user to read site configuration.
     * @deny (create, update, delete) Prevents anyone from modifying the site configuration via the client in this prototype.
     * @principle Restricts write access to site configuration.
     */
    match /site_configuration/{configId} {
      allow get: if isSignedIn();
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}