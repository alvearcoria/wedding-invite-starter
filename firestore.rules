/**
 * @fileoverview Firestore Security Rules for the Wedding Celebration Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and restricts data access based on
 * authentication status and, in some cases, ownership. It aims to prevent
 * unauthorized data modification while allowing open access to public content.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores guest information.
 * - /photos/{photoId}: Stores wedding photos.
 * - /site_configuration/{configId}: Stores site-wide configuration settings.
 *
 * Key Security Decisions:
 * - All write operations require authentication.
 * - Guests collection write operations are only allowed for authenticated users, effectively making it application-only.
 * - Photo gallery is publicly readable but write-protected.
 * - Site configuration is write-protected.
 *
 *  Denormalization for Authorization:
 * Not used in this configuration.
 *
 * Structural Segregation:
 * Not used in this configuration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to guest information.
     * @path /guests/{guestId}
     * @allow (create) - Authenticated user can create a guest entry.
     * @deny (create) - Unauthenticated user tries to create a guest entry.
     * @allow (get, list) - Authenticated users can read guest data.
     * @deny (get, list) - Unauthenticated users are not explicitly denied, allowing backend access.
     * @allow (update, delete) - Authenticated users can update or delete guest data.
     * @deny (update, delete) - Attempts to update or delete guest data will be denied.
     * @principle Requires authentication for all writes.
     */
    match /guests/{guestId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to wedding photos.
     * @path /photos/{photoId}
     * @allow (get, list) - Anyone can view the photos.
     * @deny (create, update, delete) - Only authenticated users can upload, modify, or delete photos.
     * @principle Public read, owner-only writes.  Requires authentication for writes.
     */
    match /photos/{photoId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to site configuration settings.
     * @path /site_configuration/{configId}
     * @allow (get, list) - Anyone can read the site configuration.
     * @deny (create, update, delete) - Only authenticated users can modify the site configuration.
     * @principle Public read, owner-only writes. Requires authentication for writes.
     */
    match /site_configuration/{configId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}