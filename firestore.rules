/**
 * @file Overview
 * This ruleset prioritizes security and simplicity for a wedding website's data.
 *
 * Core Philosophy:
 * The security model emphasizes simplicity and authorization independence, focusing on public read access where appropriate and strict ownership or administrative control for writes. This approach avoids complex hierarchical dependencies and makes the rules easier to understand and maintain.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores guest information; write access is not implemented in this prototype.
 * - /photos/{photoId}: Stores photo gallery images; all users can upload photos.
 * - /venues/{venueId}: Stores venue details; write access is not implemented in this prototype.
 * - /site_configuration/config: Stores site-wide settings; write access is not implemented in this prototype.
 *
 * Key Security Decisions:
 * - Guest and Venue data are read-only in this prototype.
 * - Photo uploads are public, with the assumption that moderation will be handled server-side.
 * - No user listing is allowed for any collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls read and write access to guest information. Guests can be listed, but creation, updating, and deletion are disallowed.
     * @path /guests/{guestId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access but prevents unauthorized data modification.
     */
    match /guests/{guestId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to photos in the gallery. All users can read and create photos.
     * @path /photos/{photoId}
     * @allow get, list: if true;
     * @allow create: if true;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enables collaborative photo uploads without authentication, relying on potential server-side moderation.
     */
    match /photos/{photoId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to venue information. Venues can be listed, but creation, updating, and deletion are disallowed.
     * @path /venues/{venueId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access but prevents unauthorized data modification.
     */
    match /venues/{venueId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the site configuration. Only read access is allowed.
     * @path /site_configuration/config
     * @allow get: if true;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Restricts modification of site settings to prevent unauthorized changes.
     */
    match /site_configuration/config {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}