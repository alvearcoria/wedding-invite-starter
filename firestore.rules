/**
 * @fileoverview Firestore Security Rules for the Wedding App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict authenticated-user model, ensuring only logged-in
 * users can access or modify data.  It prioritizes security and simplicity,
 * focusing on path-based authorization. Data shape validation is relaxed to
 * facilitate rapid prototyping.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores information about wedding guests. Access is restricted to authenticated users.
 * - /photos/{photoId}: Stores photos for the wedding gallery. Publicly readable, but create/update/delete operations are restricted to authenticated users.
 * - /site_configuration/{configId}: Stores site configuration settings. Access is restricted to authenticated users.
 *
 * Key Security Decisions:
 * - Authenticated User Restriction: All collections require a logged-in user. Anonymous authentication is acceptable.
 * - No User Listing: Listing users is explicitly forbidden.
 * - Flexible Schemas: Data validation is minimized to speed up development. Focus is on securing access, not data shapes.
 * - No Denormalization: The authorization model does not currently require data denormalization.
 *
 * Access Control Pattern:
 * - `/guests/{guestId}`: Authenticated-Only Access.
 * - `/photos/{photoId}`: Public Read, Authenticated-Only Writes.
 * - `/site_configuration/{configId}`: Authenticated-Only Access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /guests/{guestId} collection. Only authenticated users can read or write guest data.
     * @path /databases/{database}/documents/guests/{guestId}
     * @allow (create, update, delete, get, list) - Authenticated user can manage guests.
     * @deny (create, update, delete, get, list) - Unauthenticated user attempts any operation.
     * @principle Enforces authenticated-only access to guest data.
     */
    match /guests/{guestId} {
      // Helper function to check if a user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow reads (get, list) only for authenticated users.
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Allow create, update, and delete only for authenticated users.
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures the /photos/{photoId} collection. Publicly readable, but only authenticated users can create, update, or delete photos.
     * @path /databases/{database}/documents/photos/{photoId}
     * @allow (get, list) - Anyone can read photo data.
     * @allow (create, update, delete) - Authenticated user can manage photos.
     * @deny (create, update, delete) - Unauthenticated user attempts to create, update, or delete.
     * @principle Enforces public read access with authenticated-only write access for photos.
     */
    match /photos/{photoId} {
      // Helper function to check if a user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow public reads (get, list).
      allow get: if true;
      allow list: if true;

      // Allow create, update, and delete only for authenticated users.
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures the /site_configuration/{configId} collection. Only authenticated users can read or write the site configuration.
     * @path /databases/{database}/documents/site_configuration/{configId}
     * @allow (create, update, delete, get, list) - Authenticated user can manage site configuration.
     * @deny (create, update, delete, get, list) - Unauthenticated user attempts any operation.
     * @principle Enforces authenticated-only access to site configuration data.
     */
    match /site_configuration/{configId} {
      // Helper function to check if a user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow reads (get, list) only for authenticated users.
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Allow create, update, and delete only for authenticated users.
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}