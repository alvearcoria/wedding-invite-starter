/**
 * @fileoverview Firestore Security Rules for the wedding celebration application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and ease of understanding. It focuses on
 * access control for Guests, Photos, and SiteConfiguration.
 *
 * Data Structure:
 * - /guests/{guestId}: Information about wedding guests. Generally restricted to
 *   the application itself.
 * - /photos/{photoId}: Photos for the wedding gallery. Public read, restricted
 *   create/update/delete.
 * - /site_configuration/{configId}: Site configuration settings. Restricted access.
 * - /invitations/{invitationId}/guests/{guestId}: Public read for guest lists.
 *
 * Key Security Decisions:
 * - All writes to /guests, /photos and /site_configuration are initially restricted to authenticated users.
 * - Public read access for the guest list to allow for listing without login.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * Guests Collection Rules
     * @description Controls access to wedding guest data. Guests can only be managed via backend.
     * @path /guests/{guestId}
     * @allow (none) No direct client access is permitted.
     * @deny (create) All client creates are denied.
     * @principle Only the application backend can manage guest data.
     */
    match /guests/{guestId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * Photos Collection Rules
     * @description Controls access to wedding photos. Public read, restricted write to authenticated users.
     * @path /photos/{photoId}
     * @allow (get, list) Any user can read the photos.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete photos.
     * @principle Public read, authenticated-user-only writes.
     */
    match /photos/{photoId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * Site Configuration Rules
     * @description Controls access to site configuration settings. Restricted to authenticated users.
     * @path /site_configuration/{configId}
     * @allow (none) No public access.
     * @deny (create, update, delete) Only authenticated users can manage the configuration.
     * @principle Authenticated-user-only access for configuration.
     */
    match /site_configuration/{configId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * Invitados del evento "mely-y-noe"
     * Ruta: /invitations/mely-y-noe/guests/{guestId}
     * - create: abierto (sin login) con validaciones estrictas
     * - get, list: lectura pÃºblica
     * - update, delete: bloqueado
     */
    match /invitations/{invitationId}/guests/{guestId} {
      function isGuestCreateValid() {
        return request.resource.data.keys().hasOnly(
          ['name','phone','attending','companions','message']
        )
        && request.resource.data.name is string
           && request.resource.data.name.size() > 0
           && request.resource.data.name.size() <= 100
        && request.resource.data.phone is string
           && request.resource.data.phone.size() >= 8
           && request.resource.data.phone.size() <= 20
        && request.resource.data.attending is bool
        && request.resource.data.companions is int
           && request.resource.data.companions >= 0
           && request.resource.data.companions <= 10
        && (!('message' in request.resource.data) || (
             request.resource.data.message is string
             && request.resource.data.message.size() <= 300
           ));
      }

      allow create: if isGuestCreateValid();
      allow get, list: if true;
      allow update: if false;
      allow delete: if false;
    }

    // Helper function to determine if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}