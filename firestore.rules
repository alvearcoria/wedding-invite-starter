/**
 * @fileoverview Firestore Security Rules for the Wedding Website.
 *
 * Core Philosophy: This ruleset prioritizes ease of development and data flexibility during the prototyping phase.
 *  It focuses on strict authorization and relational integrity where required, while relaxing data validation.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores guest information.
 * - /photos/{photoId}: Stores photo URLs and descriptions.
 * - /venues/{venueId}: Stores venue details.
 * - /site_configuration/config: Stores site configuration settings.
 *
 * Key Security Decisions:
 * - Public read access is granted to the `photos` and `venues` collections to allow easy display of content.
 * - Strict owner-only access is enforced for guest data.
 * - The `site_configuration` collection can only be read or updated if the user is authenticated (admin access is implicitly given).
 *
 * Denormalization for Authorization:
 *  N/A - not applicable in this simplified prototype.
 *
 * Structural Segregation:
 *  N/A - not applicable in this simplified prototype.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to guest information. Only authenticated users can create data.
     * @path /guests/{guestId}
     * @allow (create) Signed-in user creates a guest with a matching ID.
     * @deny (create) Signed-in user creates a guest with a non-matching ID.
     * @deny (update) Non-signed-in user tries to update a guest document.
     * @principle Enforces document ownership for writes.
     */
    match /guests/{guestId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.id == guestId;
      allow update: if isSignedIn() && request.resource.data.id == guestId;
      allow delete: if isSignedIn() && resource.data.id == guestId;
    }

    /**
     * @description Manages access to photos.
     * @path /photos/{photoId}
     * @allow (get, list) Any user can read all photos.
     * @deny (create, update, delete) No one can create, update or delete photos.
     * @principle Public read access with no write access.
     */
    match /photos/{photoId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to venue data.
     * @path /venues/{venueId}
     * @allow (get, list) Any user can read all venues.
     * @deny (create, update, delete) No one can create, update or delete venues.
     * @principle Public read access with no write access.
     */
    match /venues/{venueId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to site configuration.
     * @path /site_configuration/config
     * @allow (get) Any signed-in user can read the configuration.
     * @allow (update) Any signed-in user can update the configuration.
     * @deny (create, delete) No one can create or delete the configuration document.
     * @principle Restricts writes to authenticated users.
     */
    match /site_configuration/{document} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn();
      allow delete: if false;
    }

    //------------------- HELPER FUNCTIONS -------------------

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
     * @description Checks if the user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against the resource's data and the request's auth UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}