
{
  "entities": {
    "Guest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Guest",
      "type": "object",
      "description": "Represents a guest attending the wedding.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the guest."
        },
        "name": {
          "type": "string",
          "description": "The guest's full name."
        },
        "numberAttendees": {
          "type": "number",
          "description": "The number of attendees in the guest's party."
        },
        "dietaryPreferences": {
          "type": "string",
          "description": "The guest's dietary preferences or restrictions."
        },
        "rsvp": {
          "type": "boolean",
          "description": "Indicates whether the guest has RSVP'd."
        },
        "additionalNotes": {
          "type": "string",
          "description": "Any additional notes from the guest."
        }
      },
      "required": [
        "id",
        "name",
        "numberAttendees",
        "rsvp"
      ]
    },
    "Photo": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Photo",
      "type": "object",
      "description": "Represents a photo in the photo gallery.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the photo."
        },
        "url": {
          "type": "string",
          "description": "URL of the photo.",
          "format": "uri"
        },
        "uploadTimestamp": {
          "type": "string",
          "description": "Timestamp of when the photo was uploaded.",
          "format": "date-time"
        },
        "guestId": {
          "type": "string",
          "description": "Reference to Guest. (Relationship: Guest 1:N Photo)"
        }
      },
      "required": [
        "id",
        "url",
        "uploadTimestamp"
      ]
    },
    "SiteConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SiteConfiguration",
      "type": "object",
      "description": "Represents the site configuration settings.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the site configuration."
        },
        "enableStorySection": {
          "type": "boolean",
          "description": "Indicates whether the story section is enabled."
        },
        "enableVenuesSection": {
          "type": "boolean",
          "description": "Indicates whether the venues section is enabled."
        },
        "enableTimelineSection": {
          "type": "boolean",
          "description": "Indicates whether the timeline section is enabled."
        },
        "giftRegistryLink": {
          "type": "string",
          "description": "Link to the gift registry.",
          "format": "uri"
        },
        "bankDetails": {
          "type": "string",
          "description": "Bank details for monetary gifts."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/guests/{guestId}",
        "definition": {
          "entityName": "Guest",
          "schema": {
            "$ref": "#/backend/entities/Guest"
          },
          "description": "Stores guest information. Each document represents a single guest.",
          "params": [
            {
              "name": "guestId",
              "description": "The unique identifier for the guest."
            }
          ]
        }
      },
      {
        "path": "/guests/{guestId}/photos/{photoId}",
        "definition": {
          "entityName": "Photo",
          "schema": {
            "$ref": "#/backend/entities/Photo"
          },
          "description": "Stores photos uploaded by guests. Path-based ownership ensures that only the associated guest can manage these photos.",
          "params": [
            {
              "name": "guestId",
              "description": "The unique identifier for the guest who uploaded the photo."
            },
            {
              "name": "photoId",
              "description": "The unique identifier for the photo."
            }
          ]
        }
      },
      {
        "path": "/site_configuration/{configId}",
        "definition": {
          "entityName": "SiteConfiguration",
          "schema": {
            "$ref": "#/backend/entities/SiteConfiguration"
          },
          "description": "Stores site configuration settings. There should be only one document in this collection.",
          "params": [
            {
              "name": "configId",
              "description": "The unique identifier for the site configuration document (e.g., 'main')."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to accommodate the wedding celebration application, focusing on guest management, photo gallery, and site configuration.  Authorization Independence is achieved through path-based ownership for photos, linking them directly to guests via `/guests/{guestId}/photos/{photoId}`. This eliminates the need for complex `get()` calls in security rules to verify ownership. Site configurations are stored in a global collection. This structure facilitates straightforward security rules and supports the app's core features.\n\n**Authorization Independence:** The `/guests/{guestId}/photos/{photoId}` structure ensures that access to photos is directly tied to the guest who uploaded them, eliminating the need to fetch parent document data for authorization.\n\n**QAPs Support:** The structure supports secure listing of guests and photos:\n\n*   Guests: Listing guests will require security rules to prevent unauthorized access, potentially limiting list access to administrators or the wedding organizers.\n*   Photos:  Photos are nested under the guest, so listing photos is implicitly secured by the guest's ownership. An alternative approach might be a top-level `/photos` collection, but this would require a membership-based model for write access control.\n\nThe chosen structure prioritizes ease of implementation and secure access control for the app's primary data entities."
  },
  "projectId": "wedding-invite-c09a3"
}
