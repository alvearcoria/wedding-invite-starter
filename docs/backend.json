{
  "entities": {
    "Guest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Guest",
      "type": "object",
      "description": "Represents a guest attending the wedding.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Guest entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the guest."
        },
        "numberOfAttendees": {
          "type": "number",
          "description": "The number of attendees associated with this guest."
        },
        "dietaryPreferences": {
          "type": "string",
          "description": "Dietary preferences of the guest."
        },
        "rsvp": {
          "type": "boolean",
          "description": "Indicates whether the guest has RSVP'd."
        }
      },
      "required": [
        "id",
        "name",
        "numberOfAttendees",
        "dietaryPreferences",
        "rsvp"
      ]
    },
    "Photo": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Photo",
      "type": "object",
      "description": "Represents a photo in the photo gallery.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Photo entity."
        },
        "url": {
          "type": "string",
          "description": "URL of the photo.",
          "format": "uri"
        },
        "description": {
          "type": "string",
          "description": "Optional description of the photo."
        },
        "uploadTimestamp": {
          "type": "string",
          "description": "Timestamp of when the photo was uploaded.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "url",
        "uploadTimestamp"
      ]
    },
    "Venue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Venue",
      "type": "object",
      "description": "Represents a venue for the wedding events.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Venue entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the venue."
        },
        "address": {
          "type": "string",
          "description": "Address of the venue."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude coordinate of the venue."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude coordinate of the venue."
        },
        "type": {
          "type": "string",
          "description": "Type of venue (ceremony, reception, etc.)"
        }
      },
      "required": [
        "id",
        "name",
        "address",
        "latitude",
        "longitude",
        "type"
      ]
    },
    "SiteConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SiteConfiguration",
      "type": "object",
      "description": "Configuration settings for the wedding website.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the SiteConfiguration entity."
        },
        "enableStorySection": {
          "type": "boolean",
          "description": "Flag to enable/disable the Story section."
        },
        "enableVenuesSection": {
          "type": "boolean",
          "description": "Flag to enable/disable the Venues section."
        },
        "enableTimelineSection": {
          "type": "boolean",
          "description": "Flag to enable/disable the Timeline section."
        },
        "giftRegistryUrl": {
          "type": "string",
          "description": "URL for the gift registry.",
          "format": "uri"
        },
        "bankDetails": {
          "type": "string",
          "description": "Bank details for monetary gifts."
        }
      },
      "required": [
        "id",
        "enableStorySection",
        "enableVenuesSection",
        "enableTimelineSection"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/guests/{guestId}",
        "definition": {
          "entityName": "Guest",
          "schema": {
            "$ref": "#/backend/entities/Guest"
          },
          "description": "Stores guest information including RSVP status, dietary preferences, and number of attendees.",
          "params": [
            {
              "name": "guestId",
              "description": "Unique identifier for each guest."
            }
          ]
        }
      },
      {
        "path": "/photos/{photoId}",
        "definition": {
          "entityName": "Photo",
          "schema": {
            "$ref": "#/backend/entities/Photo"
          },
          "description": "Stores photo URLs and descriptions, allowing for a collaborative photo gallery. QR code integration enables easy uploads.",
          "params": [
            {
              "name": "photoId",
              "description": "Unique identifier for each photo."
            }
          ]
        }
      },
      {
        "path": "/venues/{venueId}",
        "definition": {
          "entityName": "Venue",
          "schema": {
            "$ref": "#/backend/entities/Venue"
          },
          "description": "Stores venue details including name, address, and coordinates.",
          "params": [
            {
              "name": "venueId",
              "description": "Unique identifier for each venue."
            }
          ]
        }
      },
      {
        "path": "/site_configuration/config",
        "definition": {
          "entityName": "SiteConfiguration",
          "schema": {
            "$ref": "#/backend/entities/SiteConfiguration"
          },
          "description": "Stores site configuration settings such as section visibility and gift registry details. Only a single document exists in this collection."
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence, DBAC, and QAPs. User-owned data like guest RSVPs are stored under the `/guests` collection. Photo uploads, managed via QR code, are stored in the `/photos` collection, requiring no user authentication for uploads but potentially managed with server-side functions for moderation. Site configuration is stored in a single document at `/site_configuration/config` allowing easy access. This design avoids hierarchical authorization dependencies, ensuring that operations remain atomic and debuggable. It centralizes the points for security and separates concerns to prevent the rules becoming filters."
  }
}
