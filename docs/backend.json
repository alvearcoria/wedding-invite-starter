
{
  "entities": {
    "Guest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Guest",
      "type": "object",
      "description": "Represents a guest attending the wedding.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Guest entity."
        },
        "name": {
          "type": "string",
          "description": "Guest's full name."
        },
        "numberAttendees": {
          "type": "number",
          "description": "Number of attendees for this guest."
        },
        "dietaryPreferences": {
          "type": "string",
          "description": "Dietary preferences of the guest."
        },
        "rsvp": {
          "type": "boolean",
          "description": "Indicates whether the guest has RSVP'd."
        }
      },
      "required": [
        "id",
        "name",
        "numberAttendees",
        "dietaryPreferences",
        "rsvp"
      ]
    },
    "Photo": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Photo",
      "type": "object",
      "description": "Represents a photo in the photo gallery.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Photo entity."
        },
        "url": {
          "type": "string",
          "description": "URL of the photo.",
          "format": "uri"
        },
        "uploadTimestamp": {
          "type": "string",
          "description": "Timestamp of when the photo was uploaded.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "url",
        "uploadTimestamp"
      ]
    },
    "SiteConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SiteConfiguration",
      "type": "object",
      "description": "Represents the configuration settings for the wedding website.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the SiteConfiguration entity."
        },
        "enableStorySection": {
          "type": "boolean",
          "description": "Flag to enable/disable the story section."
        },
        "enableVenuesSection": {
          "type": "boolean",
          "description": "Flag to enable/disable the venues section."
        },
        "enableTimelineSection": {
          "type": "boolean",
          "description": "Flag to enable/disable the timeline section."
        },
        "bankDetails": {
          "type": "string",
          "description": "Bank details for gift giving."
        },
        "giftRegistryLink": {
          "type": "string",
          "description": "Link to the gift registry.",
          "format": "uri"
        }
      },
      "required": [
        "id"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/guests/{guestId}",
        "definition": {
          "entityName": "Guest",
          "schema": {
            "$ref": "#/backend/entities/Guest"
          },
          "description": "Stores guest information for the wedding. Includes fields for name, number of attendees, dietary preferences, and RSVP status.",
          "params": [
            {
              "name": "guestId",
              "description": "Unique identifier for each guest."
            }
          ]
        }
      },
      {
        "path": "/photos/{photoId}",
        "definition": {
          "entityName": "Photo",
          "schema": {
            "$ref": "#/backend/entities/Photo"
          },
          "description": "Stores photo metadata, including URL and upload timestamp. All users are allowed to list the photos.",
          "params": [
            {
              "name": "photoId",
              "description": "Unique identifier for each photo."
            }
          ]
        }
      },
      {
        "path": "/siteConfiguration/weddingConfig",
        "definition": {
          "entityName": "SiteConfiguration",
          "schema": {
            "$ref": "#/backend/entities/SiteConfiguration"
          },
          "description": "Stores the wedding site configuration, including flags for enabling/disabling sections, bank details, and gift registry link.  This is a singleton document.",
          "params": []
        }
      }
    ],
    "reasoning": "This Firestore data structure is designed to support the Mely & Noe Wedding Celebration app, focusing on security, scalability, and ease of management. It incorporates denormalization to ensure Authorization Independence, adheres to Structural Segregation for homogeneous security postures, and utilizes consistent Access Modeling patterns.\n\n*   **Authorization Independence:** The structure avoids `get()` calls in security rules by denormalizing authorization data. For instance, if access to photos needs to be restricted to specific users or groups, the relevant user/group information would be stored directly within the `Photo` document or in a parent collection, rather than relying on fetching it from a separate document or user record.\n*   **Structural Segregation:** Different types of data with varying access requirements are stored in separate collections. For example, public photos are stored separately from potentially private site configurations.\n*   **Access Modeling:** Path-based ownership is employed where appropriate (e.g., potentially user-specific data, if any existed, would be stored under `/users/{userId}`). Membership Maps are used for collaborative data access where needed.\n*   **QAPs (Rules are not Filters):** The design supports secure `list` operations by structuring data to align with access control requirements. For example, public photos are stored in a separate collection, allowing unrestricted `list` access, while other collections can have more restrictive rules.\n\nThe `siteConfiguration` is designed to be singleton, so there is only one document within that collection. This can be ensured within the code logic that handles the configuration updates.\n\nThe photo uploads will be handled via Firebase Storage and the metadata will be stored in firestore."
  },
  "projectId": "mely-noe-wedding-celebration"
}
