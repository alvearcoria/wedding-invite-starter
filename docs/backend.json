
{
  "entities": {
    "Guest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Guest",
      "type": "object",
      "description": "Represents a guest attending the wedding.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the guest."
        },
        "name": {
          "type": "string",
          "description": "The guest's name."
        },
        "numberAttendees": {
          "type": "number",
          "description": "The number of attendees in the guest's party."
        },
        "dietaryPreferences": {
          "type": "string",
          "description": "Dietary preferences or restrictions of the guest."
        },
        "rsvp": {
          "type": "boolean",
          "description": "Indicates whether the guest has RSVP'd."
        }
      },
      "required": [
        "id",
        "name",
        "numberAttendees",
        "dietaryPreferences",
        "rsvp"
      ]
    },
    "Photo": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Photo",
      "type": "object",
      "description": "Represents a photo in the shared photo gallery.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the photo."
        },
        "url": {
          "type": "string",
          "description": "URL of the photo.",
          "format": "uri"
        },
        "uploadTimestamp": {
          "type": "string",
          "description": "Timestamp of when the photo was uploaded.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "url",
        "uploadTimestamp"
      ]
    },
    "SiteConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SiteConfiguration",
      "type": "object",
      "description": "Configuration settings for the wedding website.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the configuration."
        },
        "storySectionEnabled": {
          "type": "boolean",
          "description": "Indicates whether the story section is enabled."
        },
        "venuesSectionEnabled": {
          "type": "boolean",
          "description": "Indicates whether the venues section is enabled."
        },
        "timelineSectionEnabled": {
          "type": "boolean",
          "description": "Indicates whether the timeline section is enabled."
        }
      },
      "required": [
        "id",
        "storySectionEnabled",
        "venuesSectionEnabled",
        "timelineSectionEnabled"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/guests/{guestId}",
        "definition": {
          "entityName": "Guest",
          "schema": {
            "$ref": "#/backend/entities/Guest"
          },
          "description": "Stores guest information, including RSVP status, dietary preferences, and the number of attendees. Includes denormalized data for authorization independence.",
          "params": [
            {
              "name": "guestId",
              "description": "The unique identifier for the guest."
            }
          ]
        }
      },
      {
        "path": "/photos/{photoId}",
        "definition": {
          "entityName": "Photo",
          "schema": {
            "$ref": "#/backend/entities/Photo"
          },
          "description": "Stores photos uploaded to the shared photo gallery. Allows listing all photos for all users.",
          "params": [
            {
              "name": "photoId",
              "description": "The unique identifier for the photo."
            }
          ]
        }
      },
      {
        "path": "/site_configuration/{configId}",
        "definition": {
          "entityName": "SiteConfiguration",
          "schema": {
            "$ref": "#/backend/entities/SiteConfiguration"
          },
          "description": "Stores site-wide configuration settings, such as enabling or disabling sections of the website.",
          "params": [
            {
              "name": "configId",
              "description": "The unique identifier for the site configuration."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to manage wedding-related data, including guest RSVPs, photos, and site configurations. It emphasizes security and scalability by adhering to the principles of Authorization Independence and Structural Segregation. Authorization independence is achieved by avoiding hierarchical authorization dependencies (`get()` calls in security rules). Structural Segregation is achieved by ensuring that each collection has a homogeneous security posture.\n\n*   **Guests:** Guest data is stored in a flat collection `/guests/{guestId}`. This simplifies access control, as each document can be evaluated independently.\n*   **Photos:** Photos uploaded by users are stored in `/photos/{photoId}`. The structure facilitates simple `list` operations, allowing guests to view the gallery. No user-specific subcollections are used, keeping access control simple and efficient.\n*   **Site Configuration:** Site-wide configuration data is stored in `/site_configuration/{configId}`. This allows easy management of features like enabling/disabling sections of the website.\n\nThis design allows us to implement secure `list` operations (QAPs) for the photo gallery because all photos share the same security requirements. There's no need to filter based on user-specific criteria. Additionally, authorization is independent, simplifying rules and allowing atomic operations."
  },
  "projectId": "wedding-site-73595"
}
